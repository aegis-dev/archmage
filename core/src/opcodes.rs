//
// Copyright Â© 2020-2021  Egidijus Lileika
//
// This file is part of Archmage - Fantasy Virtual Machine
//
// Archmage is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// Archmage is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with Archmage. If not, see <https://www.gnu.org/licenses/>.
//

#[repr(u8)]
#[derive(Copy, Clone, Eq, PartialEq)]
pub enum Opcode {
    Nop = 0x00,
    Return = 0x01,
    Call = 0x02,
    Jump = 0x03,
    JumpC = 0x04,
    Pop = 0x05,
    Label = 0x06,
    StackGet = 0x10,
    StackSet = 0x11,
    I64Const = 0x12,
    F64Const = 0x13,
    I8Load = 0x20,
    I8LoadC = 0x21,
    I16Load = 0x22,
    I16LoadC = 0x23,
    I32Load = 0x24,
    I32LoadC = 0x25,
    I64Load = 0x26,
    I64LoadC = 0x27,
    F32Load = 0x28,
    F32LoadC = 0x29,
    F64Load = 0x2a,
    F64LoadC = 0x2b,
    I8Store = 0x2c,
    I8StoreC = 0x2d,
    I16Store = 0x2e,
    I16StoreC = 0x2f,
    I32Store = 0x30,
    I32StoreC = 0x31,
    I64Store = 0x32,
    I64StoreC = 0x33,
    F32Store = 0x34,
    F32StoreC = 0x35,
    F64Store = 0x36,
    F64StoreC = 0x37,
    I64Eqz = 0x40,
    I64Eq = 0x41,
    I64Ne = 0x42,
    I64LtS = 0x43,
    I64LtU = 0x44,
    I64GtS = 0x45,
    I64GtU = 0x46,
    I64LeS = 0x47,
    I64LeU = 0x48,
    I64GeS = 0x49,
    I64GeU = 0x4a,
    F64Eq = 0x4b,
    F64Ne = 0x4c,
    F64Lt = 0x4d,
    F64Gt = 0x4e,
    F64Le = 0x4f,
    F64Ge = 0x50,
    I64Add = 0x61,
    I64Sub = 0x62,
    I64Mul = 0x63,
    I64DivS = 0x64,
    I64DivU = 0x65,
    I64RemS = 0x66,
    I64RemU = 0x67,
    I64Pow = 0x68,
    I64Abs = 0x69,
    I64Sqrt = 0x6a,
    I64And = 0x6b,
    I64Or = 0x6c,
    I64Xor = 0x6d,
    I64Shl = 0x6e,
    I64ShrS = 0x6f,
    I64ShrU = 0x71,
    I64Rotl = 0x72,
    I64Rotr = 0x73,
    F64Add = 0x74,
    F64Sub = 0x75,
    F64Mul = 0x76,
    F64Div = 0x77,
    F64Pow = 0x78,
    F64Abs = 0x79,
    F64Ceil = 0x7a,
    F64Floor = 0x7b,
    F64Trunc = 0x7c,
    F64Nearest = 0x7d,
    F64Sqrt = 0x7e,
}

impl Opcode {
    pub fn from_string(value: &str) -> Opcode {
        return match value {
            "nop" => Opcode::Nop,
            "return" => Opcode::Return,
            "call" => Opcode::Call,
            "jump" => Opcode::Jump,
            "jump_c" => Opcode::JumpC,
            "pop" => Opcode::Pop,
            "label" => Opcode::Label,
            "stack.get" => Opcode::StackGet,
            "stack.set" => Opcode::StackSet,
            "i64.const" => Opcode::I64Const,
            "f64.const" => Opcode::F64Const,
            "i8.ld" => Opcode::I8Load,
            "i8.ld_c" => Opcode::I8LoadC,
            "i16.ld" => Opcode::I16Load,
            "i16.ld_c" => Opcode::I16LoadC,
            "i32.ld" => Opcode::I32Load,
            "i32.ld_c" => Opcode::I32LoadC,
            "i64.ld" => Opcode::I64Load,
            "i64.ld_c" => Opcode::I64LoadC,
            "f32.ld" => Opcode::F32Load,
            "f32.ld_c" => Opcode::F32LoadC,
            "f64.ld" => Opcode::F64Load,
            "f64.ld_c" => Opcode::F64LoadC,
            "i8.st" => Opcode::I8Store,
            "i8.st_c" => Opcode::I8StoreC,
            "i16.st" => Opcode::I16Store,
            "i16.st_c" => Opcode::I16StoreC,
            "i32.st" => Opcode::I32Store,
            "i32.st_c" => Opcode::I32StoreC,
            "i64.st" => Opcode::I64Store,
            "i64.st_c" => Opcode::I64StoreC,
            "f32.st" => Opcode::F32Store,
            "f32.st_c" => Opcode::F32StoreC,
            "f64.st" => Opcode::F64Store,
            "f64.st_c" => Opcode::F64StoreC,
            "i64.eqz" => Opcode::I64Eqz,
            "i64.eq" => Opcode::I64Eq,
            "i64.ne" => Opcode::I64Ne,
            "i64.lt_s" => Opcode::I64LtS,
            "i64.lt_u" => Opcode::I64LtU,
            "i64.gt_s" => Opcode::I64GtS,
            "i64.gt_u" => Opcode::I64GtU,
            "i64.le_s" => Opcode::I64LeS,
            "i64.le_u" => Opcode::I64LeU,
            "i64.ge_s" => Opcode::I64GeS,
            "i64.ge_u" => Opcode::I64GeU,
            "f64.eq" => Opcode::F64Eq,
            "f64.ne" => Opcode::F64Ne,
            "f64.lt" => Opcode::F64Lt,
            "f64.gt" => Opcode::F64Gt,
            "f64.le" => Opcode::F64Le,
            "f64.ge" => Opcode::F64Ge,
            "i64.add" => Opcode::I64Add,
            "i64.sub" => Opcode::I64Sub,
            "i64.mul" => Opcode::I64Mul,
            "i64.div_s" => Opcode::I64DivS,
            "i64.div_u" => Opcode::I64DivU,
            "i64.rem_s" => Opcode::I64RemS,
            "i64.rem_u" => Opcode::I64RemU,
            "i64.pow" => Opcode::I64Pow,
            "i64.abs" => Opcode::I64Abs,
            "i64.sqrt" => Opcode::I64Sqrt,
            "i64.and" => Opcode::I64And,
            "i64.or" => Opcode::I64Or,
            "i64.xor" => Opcode::I64Xor,
            "i64.shl" => Opcode::I64Shl,
            "i64.shr_s" => Opcode::I64ShrS,
            "i64.shr_u" => Opcode::I64ShrU,
            "i64.rotl" => Opcode::I64Rotl,
            "i64.rotr" => Opcode::I64Rotr,
            "f64.add" => Opcode::F64Add,
            "f64.sub" => Opcode::F64Sub,
            "f64.mul" => Opcode::F64Mul,
            "f64.div" => Opcode::F64Div,
            "f64.pow" => Opcode::F64Pow,
            "f64.abs" => Opcode::F64Abs,
            "f64.ceil" => Opcode::F64Ceil,
            "f64.floor" => Opcode::F64Floor,
            "f64.trunc" => Opcode::F64Trunc,
            "f64.nearest" => Opcode::F64Nearest,
            "f64.sqrt" => Opcode::F64Sqrt,
            &_ => Opcode::Nop
        }
    }

    pub fn to_string(&self) ->  &'static str {
        return match self {
            Opcode::Nop => "nop",
            Opcode::Return => "return",
            Opcode::Call => "call",
            Opcode::Jump => "jump",
            Opcode::JumpC => "jump_c",
            Opcode::Pop => "pop",
            Opcode::Label => "label",
            Opcode::StackGet => "stack.get",
            Opcode::StackSet => "stack.set",
            Opcode::I64Const => "i64.const",
            Opcode::F64Const => "f64.const",
            Opcode::I8Load => "i8.ld",
            Opcode::I8LoadC => "i8.ld_c",
            Opcode::I16Load => "i16.ld",
            Opcode::I16LoadC => "i16.ld_c",
            Opcode::I32Load => "i32.ld",
            Opcode::I32LoadC => "i32.ld_c",
            Opcode::I64Load => "i64.ld",
            Opcode::I64LoadC => "i64.ld_c",
            Opcode::F32Load => "f32.ld",
            Opcode::F32LoadC => "f32.ld_c",
            Opcode::F64Load => "f64.ld",
            Opcode::F64LoadC => "f64.ld_c",
            Opcode::I8Store => "i8.st",
            Opcode::I8StoreC => "i8.st_c",
            Opcode::I16Store => "i16.st",
            Opcode::I16StoreC => "i16.st_c",
            Opcode::I32Store => "i32.st",
            Opcode::I32StoreC => "i32.st_c",
            Opcode::I64Store => "i64.st",
            Opcode::I64StoreC => "i64.st_c",
            Opcode::F32Store => "f32.st",
            Opcode::F32StoreC => "f32.st_c",
            Opcode::F64Store => "f64.st",
            Opcode::F64StoreC => "f64.st_c",
            Opcode::I64Eqz => "i64.eqz",
            Opcode::I64Eq => "i64.eq",
            Opcode::I64Ne => "i64.ne",
            Opcode::I64LtS => "i64.lt_s",
            Opcode::I64LtU => "i64.lt_u",
            Opcode::I64GtS => "i64.gt_s",
            Opcode::I64GtU => "i64.gt_u",
            Opcode::I64LeS => "i64.le_s",
            Opcode::I64LeU => "i64.le_u",
            Opcode::I64GeS => "i64.ge_s",
            Opcode::I64GeU => "i64.ge_u",
            Opcode::F64Eq => "f64.eq",
            Opcode::F64Ne => "f64.ne",
            Opcode::F64Lt => "f64.lt",
            Opcode::F64Gt => "f64.gt",
            Opcode::F64Le => "f64.le",
            Opcode::F64Ge => "f64.ge",
            Opcode::I64Add => "i64.add",
            Opcode::I64Sub => "i64.sub",
            Opcode::I64Mul => "i64.mul",
            Opcode::I64DivS => "i64.div_s",
            Opcode::I64DivU => "i64.div_u",
            Opcode::I64RemS => "i64.rem_s",
            Opcode::I64RemU => "i64.rem_u",
            Opcode::I64Pow => "i64.pow",
            Opcode::I64Abs => "i64.abs",
            Opcode::I64Sqrt => "i64.sqrt",
            Opcode::I64And => "i64.and",
            Opcode::I64Or => "i64.or",
            Opcode::I64Xor => "i64.xor",
            Opcode::I64Shl => "i64.shl",
            Opcode::I64ShrS => "i64.shr_s",
            Opcode::I64ShrU => "i64.shr_u",
            Opcode::I64Rotl => "i64.rotl",
            Opcode::I64Rotr => "i64.rotr",
            Opcode::F64Add => "f64.add",
            Opcode::F64Sub => "f64.sub",
            Opcode::F64Mul => "f64.mul",
            Opcode::F64Div => "f64.div",
            Opcode::F64Pow => "f64.pow",
            Opcode::F64Abs => "f64.abs",
            Opcode::F64Ceil => "f64.ceil",
            Opcode::F64Floor => "f64.floor",
            Opcode::F64Trunc => "f64.trunc",
            Opcode::F64Nearest => "f64.nearest",
            Opcode::F64Sqrt => "f64.sqrt",
        }
    }

    // Opcodes that have no additional arguments and act on their own
    pub fn is_opcode_instruction(opcode: Opcode) -> bool {
        return match opcode {
            Opcode::Nop => true,
            Opcode::Return => true,
            Opcode::JumpC => true,
            Opcode::Pop => true,
            Opcode::I8LoadC => true,
            Opcode::I16LoadC => true,
            Opcode::I32LoadC => true,
            Opcode::I64LoadC => true,
            Opcode::F32LoadC => true,
            Opcode::F64LoadC => true,
            Opcode::I8StoreC => true,
            Opcode::I16StoreC => true,
            Opcode::I32StoreC => true,
            Opcode::I64StoreC => true,
            Opcode::F32StoreC => true,
            Opcode::F64StoreC => true,
            Opcode::I64Eqz => true,
            Opcode::I64Eq => true,
            Opcode::I64Ne => true,
            Opcode::I64LtS => true,
            Opcode::I64LtU => true,
            Opcode::I64GtS => true,
            Opcode::I64GtU => true,
            Opcode::I64LeS => true,
            Opcode::I64LeU => true,
            Opcode::I64GeS => true,
            Opcode::I64GeU => true,
            Opcode::F64Eq => true,
            Opcode::F64Ne => true,
            Opcode::F64Lt => true,
            Opcode::F64Gt => true,
            Opcode::F64Le => true,
            Opcode::F64Ge => true,
            Opcode::I64Add => true,
            Opcode::I64Sub => true,
            Opcode::I64Mul => true,
            Opcode::I64DivS => true,
            Opcode::I64DivU => true,
            Opcode::I64RemS => true,
            Opcode::I64RemU => true,
            Opcode::I64Pow => true,
            Opcode::I64Abs => true,
            Opcode::I64Sqrt => true,
            Opcode::I64And => true,
            Opcode::I64Or => true,
            Opcode::I64Xor => true,
            Opcode::I64Shl => true,
            Opcode::I64ShrS => true,
            Opcode::I64ShrU => true,
            Opcode::I64Rotl => true,
            Opcode::I64Rotr => true,
            Opcode::F64Add => true,
            Opcode::F64Sub => true,
            Opcode::F64Mul => true,
            Opcode::F64Div => true,
            Opcode::F64Pow => true,
            Opcode::F64Abs => true,
            Opcode::F64Ceil => true,
            Opcode::F64Floor => true,
            Opcode::F64Trunc => true,
            Opcode::F64Nearest => true,
            Opcode::F64Sqrt => true,
            _ => false
        }
    }
}
